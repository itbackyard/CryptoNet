name: "2. Continuous Deployment"

on:
  push:
    branches:
      - "main"
      - "version3"
      - "feature/*"
      - "bugfix/*"
      - "hotfix/*"
      - "!feature/ci*"
    paths-ignore:
      - "**/README.md"
  pull_request:
    branches:
      - "main"
      - "version3"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Get Run Number
        id: vars
        run: echo "VERSION=${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}." >> $GITHUB_ENV

      - name: Print Version
        run: echo "The version is $VERSION"
      # - name: Checkout
      #   uses: actions/checkout@v3
      #   with:
      #     fetch-depth: 0
      # - name: Verify commit exists in origin/main
      #   run: git branch --remote --contains | grep origin/main
      # - name: Extract release notes
      #   run: |
      #     git log --pretty=format:'%d %s' ${GITHUB_REF} | perl -pe 's| \(.*tag: v(\d+.\d+.\d+(-preview\d{3})?)(, .*?)*\)|\n## \1\n|g' > RELEASE-NOTES
      # - name: Setup .NET
      #   uses: actions/setup-dotnet@v3
      #   with:
      #     dotnet-version: 8.0.x
      # - name: Set VERSION variable from tag
      #   run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV
      # - name: Build
      #   run: dotnet build --configuration Release /p:Version=${VERSION}
      # - name: Test
      #   run: dotnet test --configuration Release /p:Version=${VERSION} --no-build
      # - name: Pack
      #   run: dotnet pack --configuration Release /p:Version=${VERSION} --no-build --output .
      # - name: Push
      #   run: dotnet nuget push CryptoNet.${VERSION}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${NUGET_TOKEN}
      #   env:
      #     NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
